
package puzzle8;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.lang.Thread.sleep;
import java.lang.management.ManagementFactory;
import java.lang.management.MemoryUsage;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ABEDSSAMED
 */
public class TaquinGame extends javax.swing.JFrame {

    /**
     * Creates new form TaquinGame
     */
    public TaquinGame() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
         setLocation(dim.width / 2 -  getSize().width / 2, dim.height / 2 -  getSize().height / 2);
        Lvl.setSelectedIndex(0);
        txtAlg.setText("Résolution Avec : BFS " + "");
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panel2 = new java.awt.Panel();
        checkbox1 = new java.awt.Checkbox();
        checkbox2 = new java.awt.Checkbox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        canvas1 = new java.awt.Canvas();
        panel4 = new java.awt.Panel();
        btnDFS = new javax.swing.JCheckBox();
        btnBFS = new javax.swing.JCheckBox();
        cbxH = new javax.swing.JComboBox<>();
        btnAstar = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        Lvl = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btnSolv = new javax.swing.JButton();
        txtAlg = new javax.swing.JLabel();
        lbl20 = new javax.swing.JPanel();
        lbl02 = new javax.swing.JLabel();
        lbl00 = new javax.swing.JLabel();
        lbl01 = new javax.swing.JLabel();
        lbl11 = new javax.swing.JLabel();
        lbl12 = new javax.swing.JLabel();
        lbl10 = new javax.swing.JLabel();
        Lbl20 = new javax.swing.JLabel();
        lbl21 = new javax.swing.JLabel();
        lbl22 = new javax.swing.JLabel();
        txt00 = new javax.swing.JLabel();
        txt01 = new javax.swing.JLabel();
        txt02 = new javax.swing.JLabel();
        txt12 = new javax.swing.JLabel();
        txt11 = new javax.swing.JLabel();
        txt10 = new javax.swing.JLabel();
        txt20 = new javax.swing.JLabel();
        txt21 = new javax.swing.JLabel();
        txt22 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        txttime = new javax.swing.JLabel();
        txtDepth = new javax.swing.JLabel();
        txtNbNode = new javax.swing.JLabel();
        txttime1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        txtRamUsed = new javax.swing.JLabel();
        txtMaxRam = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Taquin Solveur");
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setIconImages(null);
        setUndecorated(true);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        panel2.setBackground(new java.awt.Color(102, 0, 204));

        checkbox1.setLabel("checkbox1");

        checkbox2.setLabel("checkbox2");

        jLabel7.setBackground(new java.awt.Color(102, 0, 204));
        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Difficulté");

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("SII Puzzle");

        panel4.setPreferredSize(new java.awt.Dimension(167, 2));

        javax.swing.GroupLayout panel4Layout = new javax.swing.GroupLayout(panel4);
        panel4.setLayout(panel4Layout);
        panel4Layout.setHorizontalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );
        panel4Layout.setVerticalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        btnDFS.setBackground(new java.awt.Color(102, 0, 204));
        btnDFS.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnDFS.setForeground(new java.awt.Color(255, 255, 255));
        btnDFS.setText("Profondeur  D'abord  DFS");
        btnDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDFSActionPerformed(evt);
            }
        });

        btnBFS.setBackground(new java.awt.Color(102, 0, 204));
        btnBFS.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnBFS.setForeground(new java.awt.Color(255, 255, 255));
        btnBFS.setSelected(true);
        btnBFS.setText("Largeur D'abord  BFS");
        btnBFS.setToolTipText("BFS est par défaut si vous avez selictionné aucune algorithme");
        btnBFS.setFocusable(false);
        btnBFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBFSActionPerformed(evt);
            }
        });

        cbxH.setBackground(new java.awt.Color(102, 0, 204));
        cbxH.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        cbxH.setForeground(new java.awt.Color(255, 255, 255));
        cbxH.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Les cases mal placées", "Distance de manhattan" }));
        cbxH.setEnabled(false);
        cbxH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxHActionPerformed(evt);
            }
        });

        btnAstar.setBackground(new java.awt.Color(102, 0, 204));
        btnAstar.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnAstar.setForeground(new java.awt.Color(255, 255, 255));
        btnAstar.setText("A étoile");
        btnAstar.setToolTipText("l'heuristique des case male placées est par défaut ");
        btnAstar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAstarActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(102, 0, 204));
        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Algorithmes de résolution");

        Lvl.setBackground(new java.awt.Color(102, 0, 204));
        Lvl.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        Lvl.setForeground(new java.awt.Color(255, 255, 255));
        Lvl.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Easy", "Medium", "Hard" }));
        Lvl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LvlMouseClicked(evt);
            }
        });
        Lvl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LvlActionPerformed(evt);
            }
        });

        jTextArea1.setBackground(new java.awt.Color(102, 0, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jTextArea1.setText("Veuillez choisir une méthode de résolution.\nRemarque : Le temps moyen de résolution\nest de 09:55 min,\nSi le nombre de nœuds généré atteint  les (9!/2) ,\nle programme s’arrêtera et un message d’erreur\ns’affichera.\n");
        jTextArea1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setViewportView(jTextArea1);

        btnSolv.setBackground(new java.awt.Color(102, 0, 204));
        btnSolv.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        btnSolv.setForeground(new java.awt.Color(255, 255, 255));
        btnSolv.setText("Résoudre");
        btnSolv.setToolTipText("La résolution peut prendre long temp !!");
        btnSolv.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnSolv.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnSolvStateChanged(evt);
            }
        });
        btnSolv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSolvMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnSolvMousePressed(evt);
            }
        });
        btnSolv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolvActionPerformed(evt);
            }
        });
        btnSolv.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSolvKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92))
            .addGroup(panel2Layout.createSequentialGroup()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbxH, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAstar, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDFS, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Lvl, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnSolv, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel2Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(btnBFS, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(28, Short.MAX_VALUE)))
            .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel2Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(107, Short.MAX_VALUE)))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(129, 129, 129)
                .addComponent(btnDFS, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAstar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(cbxH, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Lvl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(btnSolv, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel2Layout.createSequentialGroup()
                    .addGap(155, 155, 155)
                    .addComponent(btnBFS, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(524, Short.MAX_VALUE)))
            .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel2Layout.createSequentialGroup()
                    .addGap(103, 103, 103)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(570, Short.MAX_VALUE)))
        );

        txtAlg.setFont(new java.awt.Font("Trebuchet MS", 0, 24)); // NOI18N
        txtAlg.setForeground(new java.awt.Color(0, 0, 0));
        txtAlg.setText("Résolution Avec ");
        txtAlg.setToolTipText("");
        txtAlg.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        lbl20.setBackground(new java.awt.Color(255, 255, 255));

        lbl02.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        lbl02.setForeground(new java.awt.Color(0, 0, 0));
        lbl02.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl02.setText("1");
        lbl02.setToolTipText("");
        lbl02.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        lbl00.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        lbl00.setForeground(new java.awt.Color(0, 0, 0));
        lbl00.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl00.setText("1");
        lbl00.setToolTipText("");
        lbl00.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        lbl01.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        lbl01.setForeground(new java.awt.Color(0, 0, 0));
        lbl01.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl01.setText("1");
        lbl01.setToolTipText("");
        lbl01.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        lbl11.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        lbl11.setForeground(new java.awt.Color(0, 0, 0));
        lbl11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl11.setText("1");
        lbl11.setToolTipText("");
        lbl11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        lbl12.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        lbl12.setForeground(new java.awt.Color(0, 0, 0));
        lbl12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl12.setText("1");
        lbl12.setToolTipText("");
        lbl12.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        lbl10.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        lbl10.setForeground(new java.awt.Color(0, 0, 0));
        lbl10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl10.setText("1");
        lbl10.setToolTipText("");
        lbl10.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        Lbl20.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        Lbl20.setForeground(new java.awt.Color(0, 0, 0));
        Lbl20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lbl20.setText("1");
        Lbl20.setToolTipText("");
        Lbl20.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        lbl21.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        lbl21.setForeground(new java.awt.Color(0, 0, 0));
        lbl21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl21.setText("1");
        lbl21.setToolTipText("");
        lbl21.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        lbl22.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        lbl22.setForeground(new java.awt.Color(0, 0, 0));
        lbl22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl22.setText("1");
        lbl22.setToolTipText("");
        lbl22.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        txt00.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        txt00.setForeground(new java.awt.Color(0, 0, 0));
        txt00.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt00.setText("1");
        txt00.setToolTipText("");
        txt00.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        txt01.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        txt01.setForeground(new java.awt.Color(0, 0, 0));
        txt01.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt01.setText("2");
        txt01.setToolTipText("");
        txt01.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        txt02.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        txt02.setForeground(new java.awt.Color(0, 0, 0));
        txt02.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt02.setText("3");
        txt02.setToolTipText("");
        txt02.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        txt12.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        txt12.setForeground(new java.awt.Color(0, 0, 0));
        txt12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt12.setText("4");
        txt12.setToolTipText("");
        txt12.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        txt11.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        txt11.setForeground(new java.awt.Color(0, 0, 0));
        txt11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt11.setText(" ");
        txt11.setToolTipText("");
        txt11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        txt10.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        txt10.setForeground(new java.awt.Color(0, 0, 0));
        txt10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt10.setText("8");
        txt10.setToolTipText("");
        txt10.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        txt20.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        txt20.setForeground(new java.awt.Color(0, 0, 0));
        txt20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt20.setText("7");
        txt20.setToolTipText("");
        txt20.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        txt21.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        txt21.setForeground(new java.awt.Color(0, 0, 0));
        txt21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt21.setText("6");
        txt21.setToolTipText("");
        txt21.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        txt22.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        txt22.setForeground(new java.awt.Color(0, 0, 0));
        txt22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt22.setText("5");
        txt22.setToolTipText("");
        txt22.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Etat initial");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Etat But");

        javax.swing.GroupLayout lbl20Layout = new javax.swing.GroupLayout(lbl20);
        lbl20.setLayout(lbl20Layout);
        lbl20Layout.setHorizontalGroup(
            lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lbl20Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lbl20Layout.createSequentialGroup()
                        .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lbl20Layout.createSequentialGroup()
                                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt00, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt01, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt11, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(lbl20Layout.createSequentialGroup()
                                .addComponent(txt20, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txt21, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt12, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt02, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt22, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(lbl20Layout.createSequentialGroup()
                        .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lbl20Layout.createSequentialGroup()
                                .addComponent(Lbl20, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbl21, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(lbl20Layout.createSequentialGroup()
                                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl00, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl01, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl11, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl12, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl02, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl22, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39))))
            .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(lbl20Layout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(108, Short.MAX_VALUE)))
            .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(lbl20Layout.createSequentialGroup()
                    .addGap(78, 78, 78)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(83, Short.MAX_VALUE)))
        );
        lbl20Layout.setVerticalGroup(
            lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lbl20Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl00, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl01, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl02, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl11, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl12, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lbl20, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl22, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl21, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt00, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt01, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt02, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt11, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt12, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt20, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt22, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt21, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
            .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(lbl20Layout.createSequentialGroup()
                    .addGap(39, 39, 39)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(495, Short.MAX_VALUE)))
            .addGroup(lbl20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lbl20Layout.createSequentialGroup()
                    .addContainerGap(307, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(227, 227, 227)))
        );

        txtOutput.setEditable(false);
        txtOutput.setBackground(new java.awt.Color(255, 255, 255));
        txtOutput.setColumns(20);
        txtOutput.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        txtOutput.setForeground(new java.awt.Color(0, 0, 0));
        txtOutput.setRows(5);
        txtOutput.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204), new java.awt.Color(102, 0, 204)));
        jScrollPane2.setViewportView(txtOutput);

        txttime.setBackground(new java.awt.Color(255, 255, 255));
        txttime.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        txttime.setForeground(new java.awt.Color(0, 0, 0));
        txttime.setText("temps d'exécution: ");
        txttime.setBorder(null);

        txtDepth.setBackground(new java.awt.Color(255, 255, 255));
        txtDepth.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        txtDepth.setForeground(new java.awt.Color(0, 0, 0));
        txtDepth.setText("profondeur de la solution:");
        txtDepth.setBorder(null);

        txtNbNode.setBackground(new java.awt.Color(255, 255, 255));
        txtNbNode.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        txtNbNode.setForeground(new java.awt.Color(0, 0, 0));
        txtNbNode.setText("nombre de noeuds générés :");
        txtNbNode.setBorder(null);

        txttime1.setBackground(new java.awt.Color(255, 255, 255));
        txttime1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        txttime1.setForeground(new java.awt.Color(0, 0, 0));
        txttime1.setText("Les mouvements appliqués pour atteindre l'état but");

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puzzle8/Windows_Close_Program_22531 (1).png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txtRamUsed.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        txtRamUsed.setForeground(new java.awt.Color(0, 0, 0));
        txtRamUsed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtRamUsed.setText(" ");
        txtRamUsed.setToolTipText("La valeur  de  RAM  utilisé");

        txtMaxRam.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        txtMaxRam.setForeground(new java.awt.Color(0, 0, 0));
        txtMaxRam.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtMaxRam.setText(" ");
        txtMaxRam.setToolTipText("La valeur max utilisé par la RAM");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtAlg, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addComponent(txttime1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                                    .addComponent(txttime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtNbNode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtDepth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtMaxRam, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtRamUsed, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtAlg, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txttime1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txttime, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNbNode, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDepth, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaxRam, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRamUsed, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lbl20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
            .addComponent(panel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
  
   



    private void btnBFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBFSActionPerformed
        // TODO add your handling code here:
        txtAlg.setText("Résolution Avec : BFS " + "");
        if (btnBFS.isSelected()) {
            btnDFS.setSelected(false);
            btnAstar.setSelected(false);
            cbxH.enable(false);
        }else {
            
        }
        
         txtOutput.setText("");
         txttime.setText("temps d'exécution :");
         txtNbNode.setText("profondeur de la solution:");
          txtDepth.setText("nombre de noeuds générés : ");
           txtMaxRam.setText("");
        txtRamUsed.setText("");
    }//GEN-LAST:event_btnBFSActionPerformed

    private void btnDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDFSActionPerformed
        // TODO add your handling code here:
        txtAlg.setText("Résolution Avec : DFS " + "");
        if (btnDFS.isSelected()) {
            btnBFS.setSelected(false);
            btnAstar.setSelected(false);
            cbxH.enable(false);
        } else {
            if(!btnBFS.isSelected()|| !btnAstar.isSelected()){
                txtAlg.setText("Résolution Avec : BFS " + "");
                btnBFS.setSelected(true);
            }

        }
         txtOutput.setText("");
         txttime.setText("temps d'exécution :");
         txtNbNode.setText("profondeur de la solution:");
          txtDepth.setText("nombre de noeuds générés : ");
           txtMaxRam.setText("");
        txtRamUsed.setText("");
    }//GEN-LAST:event_btnDFSActionPerformed

    private void btnAstarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAstarActionPerformed
        // TODO add your handling code here:
        if (btnAstar.isSelected()) {
            btnBFS.setSelected(false);
            btnDFS.setSelected(false);
            cbxH.enable(true);
            cbxH.setSelectedIndex(0);

        }else{
            cbxH.enable(false);
            if(!btnBFS.isSelected()|| !btnDFS.isSelected()){
                txtAlg.setText("Résolution Avec : BFS " + "");
                btnBFS.setSelected(true);
            }
        }
         txtOutput.setText("");
         txttime.setText("temps d'exécution :");
         txtNbNode.setText("profondeur de la solution:");
          txtDepth.setText("nombre de noeuds générés : ");
           txtMaxRam.setText("");
        txtRamUsed.setText("");
    }//GEN-LAST:event_btnAstarActionPerformed

 

   
        static Configuration Cnf=new Configuration();
       static  TaquinNode easyNode ;
         static TaquinNode hardNode ;
       static TaquinNode mediumNode ;
    private void LvlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LvlActionPerformed
        // TODO add your handling code here:
         txtOutput.setText("");
         txttime.setText("temps d'exécution :");
         txtNbNode.setText("profondeur de la solution:");
          txtDepth.setText("nombre de noeuds générés : ");
           txtMaxRam.setText("");
        txtRamUsed.setText("");
        
        System.out.println();
        
        if (Lvl.getSelectedItem() == "Easy") {
            Cnf.generation("Easy");
           easyNode=new TaquinNode(Cnf.getEasy());
            lbl00.setText(Cnf.getEasy()[0][0] == 0 ? "" : Cnf.getEasy()[0][0] + "");
            lbl01.setText(Cnf.getEasy()[0][1] == 0 ? "" : Cnf.getEasy()[0][1] + "");
            lbl02.setText(Cnf.getEasy()[0][2] == 0 ? "" : Cnf.getEasy()[0][2] + "");
            lbl10.setText(Cnf.getEasy()[1][0] == 0 ? "" : Cnf.getEasy()[1][0] + "");
            lbl11.setText(Cnf.getEasy()[1][1] == 0 ? "" : Cnf.getEasy()[1][1] + "");
            lbl12.setText(Cnf.getEasy()[1][2] == 0 ? "" : Cnf.getEasy()[1][2] + "");
            Lbl20.setText(Cnf.getEasy()[2][0] == 0 ? "" : Cnf.getEasy()[2][0] + "");
            lbl21.setText(Cnf.getEasy()[2][1] == 0 ? "" : Cnf.getEasy()[2][1] + "");
            lbl22.setText(Cnf.getEasy()[2][2] == 0 ? "" : Cnf.getEasy()[2][2] + "");

        }else 
        if (Lvl.getSelectedItem() == "Hard") {
             Cnf.generation("Hard");
           hardNode=new TaquinNode(Cnf.getHard());
            lbl00.setText(Cnf.getHard()[0][0] == 0 ? "" : Cnf.getHard()[0][0] + "");
            lbl01.setText(Cnf.getHard()[0][1] == 0 ? "" : Cnf.getHard()[0][1] + "");
            lbl02.setText(Cnf.getHard()[0][2] == 0 ? "" : Cnf.getHard()[0][2] + "");
            lbl10.setText(Cnf.getHard()[1][0] == 0 ? "" : Cnf.getHard()[1][0] + "");
            lbl11.setText(Cnf.getHard()[1][1] == 0 ? "" : Cnf.getHard()[1][1] + "");
            lbl12.setText(Cnf.getHard()[1][2] == 0 ? "" : Cnf.getHard()[1][2] + "");
            Lbl20.setText(Cnf.getHard()[2][0] == 0 ? "" : Cnf.getHard()[2][0] + "");
            lbl21.setText(Cnf.getHard()[2][1] == 0 ? "" : Cnf.getHard()[2][1] + "");
            lbl22.setText(Cnf.getHard()[2][2] == 0 ? "" : Cnf.getHard()[2][2] + "");
        }else 
        if (Lvl.getSelectedItem() == "Medium") {
            Cnf.generation("Medium");
           mediumNode=new TaquinNode(Cnf.getMedium());
            lbl00.setText(Cnf.getMedium()[0][0] == 0 ? "" : Cnf.getMedium()[0][0] + "");
            lbl01.setText(Cnf.getMedium()[0][1] == 0 ? "" : Cnf.getMedium()[0][1] + "");
            lbl02.setText(Cnf.getMedium()[0][2] == 0 ? "" : Cnf.getMedium()[0][2] + "");
            lbl10.setText(Cnf.getMedium()[1][0] == 0 ? "" : Cnf.getMedium()[1][0] + "");
            lbl11.setText(Cnf.getMedium()[1][1] == 0 ? "" : Cnf.getMedium()[1][1] + "");
            lbl12.setText(Cnf.getMedium()[1][2] == 0 ? "" : Cnf.getMedium()[1][2] + "");
            Lbl20.setText(Cnf.getMedium()[2][0] == 0 ? "" : Cnf.getMedium()[2][0] + "");
            lbl21.setText(Cnf.getMedium()[2][1] == 0 ? "" : Cnf.getMedium()[2][1] + "");
            lbl22.setText(Cnf.getMedium()[2][2] == 0 ? "" : Cnf.getMedium()[2][2] + "");
        }
      
    }//GEN-LAST:event_LvlActionPerformed

    
    
    static BFS searchBFS = null;
    static DFS searchDFS = null;
    static Astar searchAstar = null;
    int[][] pA = new int[3][3];
    static List<TaquinNode> path;
    int k = 0;
    private void btnSolvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolvActionPerformed
        // TODO add your handling code here:
        MemoryUsage heapMemoryUsage = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
        
        if (Lvl.getSelectedItem() == "Easy") {
           
            if (btnBFS.isSelected()) {

                 searchBFS = new BFS( easyNode);
                long startTime = System.currentTimeMillis();

                 searchBFS.search();

                long endTime = System.currentTimeMillis();
                String txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                txtDepth.setText("nombre de noeuds générés : " + searchBFS.info.time);
                 if(searchBFS.info.time>=181404){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtNbNode.setText("profondeur de la solution:" + searchBFS.p.depth);
                path = searchBFS.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();

                

                 txt = "  \n " +  searchBFS.Pathstr;

                txtOutput.setText(txt);
                txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);

            } else if (btnDFS.isSelected()) {
      
                
                 searchDFS = new DFS(easyNode);

                long startTime = System.currentTimeMillis();
                searchDFS.search();

                long endTime = System.currentTimeMillis();
                String txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                txtDepth.setText("nombre de noeuds générés : " + searchDFS.info.time);
                if(searchDFS.info.time>=181404){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtNbNode.setText("profondeur de la solution:" + searchDFS.p.depth);
                path = searchDFS.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                 txt = "  \n " + searchDFS.Pathstr;

                txtOutput.setText(txt);
                txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);

            } else if (cbxH.getSelectedItem() == "Les cases mal placées") {

                 searchAstar = new Astar( easyNode, 1);
                long startTime = System.currentTimeMillis();
                 searchAstar.search();

                long endTime = System.currentTimeMillis();
               String txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                txtDepth.setText("nombre de noeuds générés : " + searchAstar.info.time);
                if(searchAstar.info.time>=181400){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtNbNode.setText("profondeur de la solution:" + searchAstar.p.depth);
                path = searchAstar.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                 txt = "  \n " +  searchAstar.Pathstr;

                txtOutput.setText(txt);
                

            } else if (cbxH.getSelectedItem() == "Distance de manhattan") {

                 searchAstar = new Astar( easyNode, 2);
                long startTime = System.currentTimeMillis();
                 searchAstar.search();

                long endTime = System.currentTimeMillis();
                 String txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                txtDepth.setText("nombre de noeuds générés : " + searchAstar.info.time);
                if(searchAstar.info.time>=181400){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtNbNode.setText("profondeur de la solution:" + searchAstar.p.depth);
                path = searchAstar.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                 txt = "  \n " +  searchAstar.Pathstr;

                txtOutput.setText(txt);
              

            }

        } else if (Lvl.getSelectedItem() == "Hard") {
            System.out.println("Hard");

            if (btnBFS.isSelected()) {

                 searchBFS = new BFS( hardNode);
                long startTime = System.currentTimeMillis();
                 searchBFS.search();

                long endTime = System.currentTimeMillis();
                 String txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                if(searchBFS.info.time>=18140){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtDepth.setText("nombre de noeuds générés : " + searchBFS.info.time);
                txtNbNode.setText("profondeur de la solution:" + searchBFS.p.depth);
                path = searchBFS.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                 txt = "  \n " +  searchBFS.Pathstr;
                txtOutput.setText(txt);
               
            } else if (btnDFS.isSelected()) {

                searchDFS = new DFS( hardNode);
                long startTime = System.currentTimeMillis();
                 searchDFS.search();
                long endTime = System.currentTimeMillis();
                 String  txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                 if(searchDFS.info.time>=18140){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtDepth.setText("nombre de noeuds générés : " + searchDFS.info.time);
                txtNbNode.setText("profondeur de la solution:" + searchDFS.p.depth);
                path = searchDFS.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                 txt = "  \n " +  searchDFS.Pathstr;
                txtOutput.setText(txt);
               

            } else if (cbxH.getSelectedItem() == "Les cases mal placées") {

               searchAstar = new Astar( hardNode, 1);
                long startTime = System.currentTimeMillis();
                 searchAstar.search();

                long endTime = System.currentTimeMillis();
                 String  txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                txtDepth.setText("nombre de noeuds générés : " + searchAstar.info.time);
                if(searchAstar.info.time>=181400){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtNbNode.setText("profondeur de la solution:" + searchAstar.p.depth);
                path = searchAstar.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                 txt = "  \n " +  searchAstar.Pathstr;
                txtOutput.setText(txt);
             
            } else if (cbxH.getSelectedItem() == "Distance de manhattan") {

                searchAstar = new Astar( hardNode, 2);
                long startTime = System.currentTimeMillis();
                 searchAstar.search();

                long endTime = System.currentTimeMillis();
                String txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                if(searchAstar.info.time>=18140){
                     txtOutput.setText( "Pas de solution !!");
                }
                
                txtDepth.setText("nombre de noeuds générés : " + searchAstar.info.time);
                txtNbNode.setText("profondeur de la solution:" + searchAstar.p.depth);
                path = searchAstar.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                 txt = "  \n " +  searchAstar.Pathstr;
                txtOutput.setText(txt);
                txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
            }
        } else if (Lvl.getSelectedItem() == "Medium") {

            System.out.println("Mideium");
            if (btnBFS.isSelected()) {

                searchBFS = new BFS( mediumNode);
                long startTime = System.currentTimeMillis();
                 searchBFS.search();
                long endTime = System.currentTimeMillis();
                 String  txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                 if(searchBFS.info.time>=18140){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtDepth.setText("nombre de noeuds générés : " + searchBFS.info.time);
                txtNbNode.setText("profondeur de la solution:" + searchBFS.p.depth);
                path = searchBFS.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                 txt = "  \n " +  searchBFS.Pathstr;
                txtOutput.setText(txt);
                
            } else if (btnDFS.isSelected()) {

                searchDFS = new DFS( mediumNode);
                long startTime = System.currentTimeMillis();
                 searchDFS.search();
                long endTime = System.currentTimeMillis();
                 String  txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                if(searchDFS.info.time>=18140){
                     txtOutput.setText( "Pas de solution !!");
                }
                path = searchDFS.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                txtDepth.setText("nombre de noeuds générés : " + searchDFS.info.time);
                txtNbNode.setText("profondeur de la solution:" + searchDFS.p.depth);

                 txt = "  \n " +  searchDFS.Pathstr;
                txtOutput.setText(txt);
                txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);

            } else if (cbxH.getSelectedItem() == "Les cases mal placées") {

                searchAstar = new Astar( mediumNode, 1);
                long startTime = System.currentTimeMillis();
                 searchAstar.search();
                long endTime = System.currentTimeMillis();
                   String  txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                if(searchAstar.info.time>=18140){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtDepth.setText("nombre de noeuds générés : " + searchAstar.info.time);
                txtNbNode.setText("profondeur de la solution:" + searchAstar.p.depth);
                path = searchAstar.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                txt = "  \n " +  searchAstar.Pathstr;
                txtOutput.setText(txt);
                
            } else if (cbxH.getSelectedItem() == "Distance de manhattan") {
                 searchAstar = new Astar( mediumNode, 2);
                long startTime = System.currentTimeMillis();
                 searchAstar.search();
                long endTime = System.currentTimeMillis();
                 String  txt = "" + "temps d'exécution :" + (endTime - startTime) + " milliseconds";
                txttime.setText(txt);
                 if(searchAstar.info.time>=181400){
                     txtOutput.setText( "Pas de solution !!");
                }
                txtDepth.setText("nombre de noeuds générés : " + searchAstar.info.time);
                txtNbNode.setText("profondeur de la solution:" + searchAstar.p.depth);
                path = searchAstar.p.path;
                Movement_Action m = new Movement_Action(path);
                m.show();
                 txt = "  \n " +  searchAstar.Pathstr;
                txtOutput.setText(txt);
               
            }
        } 
        long maxMB = heapMemoryUsage.getMax() / (1024 * 1024);
        long usedMB = heapMemoryUsage.getUsed() / (1024 * 1024);
        System.out.println("max memoir usage="+maxMB);
        System.out.println(" memoir used ="+usedMB);
        txtMaxRam.setText("Ram Max utilisé :"+maxMB+" MB");
        txtRamUsed.setText("Ram utilisé :"+usedMB+" MB");


    }//GEN-LAST:event_btnSolvActionPerformed

    private void cbxHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxHActionPerformed
        // TODO add your handling code here:
        if (cbxH.getSelectedItem() == "Les cases mal placées")
            txtAlg.setText("Résolution Avec : A* huristique Les cases mal placées" + "");
        else if (cbxH.getSelectedItem() == "Distance de manhattan") {
            txtAlg.setText("Résolution Avec : A* huristique Distance de manhattan" + "");

        }
        txtOutput.setText("");
         txttime.setText("temps d'exécution :");
         txtNbNode.setText("profondeur de la solution:");
          txtDepth.setText("nombre de noeuds générés : ");
           txtMaxRam.setText("");
        txtRamUsed.setText("");
    }//GEN-LAST:event_cbxHActionPerformed

    private void btnSolvStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnSolvStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_btnSolvStateChanged

    private void btnSolvKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSolvKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnSolvKeyPressed

    private void btnSolvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSolvMouseClicked
        // TODO add your handling code here:
        // txttime.setText("Entrain de resoudre ....");

    }//GEN-LAST:event_btnSolvMouseClicked

    private void btnSolvMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSolvMousePressed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnSolvMousePressed

    private void LvlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LvlMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_LvlMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

         dispose();
        Welcom_Form W = new Welcom_Form();
        W.show();

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaquinGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaquinGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaquinGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaquinGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaquinGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Lbl20;
    private javax.swing.JComboBox<String> Lvl;
    private javax.swing.JCheckBox btnAstar;
    private javax.swing.JCheckBox btnBFS;
    private javax.swing.JCheckBox btnDFS;
    private javax.swing.JButton btnSolv;
    private java.awt.Canvas canvas1;
    private javax.swing.JComboBox<String> cbxH;
    private java.awt.Checkbox checkbox1;
    private java.awt.Checkbox checkbox2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbl00;
    private javax.swing.JLabel lbl01;
    private javax.swing.JLabel lbl02;
    private javax.swing.JLabel lbl10;
    private javax.swing.JLabel lbl11;
    private javax.swing.JLabel lbl12;
    private javax.swing.JPanel lbl20;
    private javax.swing.JLabel lbl21;
    private javax.swing.JLabel lbl22;
    private java.awt.Panel panel2;
    private java.awt.Panel panel4;
    private javax.swing.JLabel txt00;
    private javax.swing.JLabel txt01;
    private javax.swing.JLabel txt02;
    private javax.swing.JLabel txt10;
    private javax.swing.JLabel txt11;
    private javax.swing.JLabel txt12;
    private javax.swing.JLabel txt20;
    private javax.swing.JLabel txt21;
    private javax.swing.JLabel txt22;
    private javax.swing.JLabel txtAlg;
    private javax.swing.JLabel txtDepth;
    private javax.swing.JLabel txtMaxRam;
    private javax.swing.JLabel txtNbNode;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JLabel txtRamUsed;
    private javax.swing.JLabel txttime;
    private javax.swing.JLabel txttime1;
    // End of variables declaration//GEN-END:variables
}
